const { execSync } = require('child_process');
const fs = require('fs-extra');
const path = require('path');

class ProjectCleaner {
  constructor() {
    this.projectRoot = path.resolve(__dirname, '..');
    this.backupPath = path.join(this.projectRoot, 'backup');
    this.docsPath = path.join(this.projectRoot, 'docs');
  }

  async cleanupProject() {
    console.log('๐งน Cleaning up project folder...');
    console.log('='.repeat(50));
    
    try {
      // Create backup of important files
      await this.createBackup();
      
      // Remove unnecessary files and directories
      await this.removeUnnecessaryFiles();
      
      // Organize documentation
      await this.organizeDocumentation();
      
      // Clean up build artifacts
      await this.cleanupBuildArtifacts();
      
      // Create final project structure
      await this.createProjectStructure();
      
      console.log('\nโ Project cleanup completed successfully!');
      
    } catch (error) {
      console.error('โ Failed to cleanup project:', error.message);
      throw error;
    }
  }

  async createBackup() {
    console.log('๐ฆ Creating backup of important files...');
    
    await fs.ensureDir(this.backupPath);
    
    // Backup important files
    const filesToBackup = [
      'package.json',
      'package-lock.json',
      'README.md',
      'electron/main.js',
      'electron/renderer/index.html',
      'electron/renderer/renderer.js',
      'electron/renderer/styles.css',
      'src/crawler.js',
      'src/nwbuddy-crawler.js',
      'config/nwbuddy-config.js',
      'config/artifacts-config.js'
    ];
    
    for (const file of filesToBackup) {
      const sourcePath = path.join(this.projectRoot, file);
      const backupPath = path.join(this.backupPath, file);
      
      if (fs.existsSync(sourcePath)) {
        await fs.ensureDir(path.dirname(backupPath));
        await fs.copy(sourcePath, backupPath);
        console.log(`   โ Backed up: ${file}`);
      }
    }
    
    console.log('   โ Backup created in: backup/');
  }

  async removeUnnecessaryFiles() {
    console.log('๐๏ธ  Removing unnecessary files...');
    
    // Files to remove
    const filesToRemove = [
      'test-discord-bot.js',
      'test-discord-integration.js',
      'test-discord-integration.json',
      'test-nwb-tab.js',
      'test-nwbuddy-fix.js',
      'nwdb-debug-screenshot.png',
      'nodemon.json',
      'electron-builder-simple.json',
      'electron-webapp-build.zip',
      'fixed-discord-bot.js',
      'discord-bot-integration-example.json',
      'discord-bot-package.json'
    ];
    
    for (const file of filesToRemove) {
      const filePath = path.join(this.projectRoot, file);
      if (fs.existsSync(filePath)) {
        await fs.remove(filePath);
        console.log(`   โ Removed: ${file}`);
      }
    }
    
    // Directories to remove
    const dirsToRemove = [
      'out',
      'out-fixed',
      'dist',
      'standalone',
      'NW-Buddy-Scraper-Standalone',
      'NW-Buddy-Scraper-Standalone-Folder',
      'NW-Buddy-Scraper-Simple',
      'NW-Buddy-Scraper-Simple-Folder'
    ];
    
    for (const dir of dirsToRemove) {
      const dirPath = path.join(this.projectRoot, dir);
      if (fs.existsSync(dirPath)) {
        await fs.remove(dirPath);
        console.log(`   โ Removed directory: ${dir}`);
      }
    }
  }

  async organizeDocumentation() {
    console.log('๐ Organizing documentation...');
    
    await fs.ensureDir(this.docsPath);
    
    // Move documentation files
    const docsToMove = [
      'DISCORD_BOT_INTEGRATION.md',
      'ELECTRON_README.md',
      'PROJECT_STRUCTURE.md'
    ];
    
    for (const doc of docsToMove) {
      const sourcePath = path.join(this.projectRoot, doc);
      const destPath = path.join(this.docsPath, doc);
      
      if (fs.existsSync(sourcePath)) {
        await fs.move(sourcePath, destPath);
        console.log(`   โ Moved: ${doc} โ docs/`);
      }
    }
    
    // Create a main documentation index
    const docsIndex = `# NW Buddy Scraper - Documentation

## ๐ Project Structure

This project contains the following documentation:

- **DISCORD_BOT_INTEGRATION.md** - Discord bot integration guide
- **ELECTRON_README.md** - Electron application setup and usage
- **PROJECT_STRUCTURE.md** - Project structure overview

## ๐ Quick Start

1. Install dependencies: \`npm install\`
2. Start development: \`npm start\`
3. Build standalone: \`npm run create-single-bat\`
4. Create package: \`npm run create-simple-package\`

## ๐ฆ Distribution

The project includes scripts to create standalone distributions:

- \`npm run create-single-bat\` - Creates single batch file launcher
- \`npm run create-simple-package\` - Creates distribution package
- \`npm run create-final-package\` - Creates full distribution package

## ๐ง Development

- \`npm start\` - Start Electron application
- \`npm run package\` - Package with Electron Forge
- \`npm run make\` - Create installers with Electron Forge
`;
    
    const indexPath = path.join(this.docsPath, 'README.md');
    await fs.writeFile(indexPath, docsIndex);
    console.log('   โ Created documentation index');
  }

  async cleanupBuildArtifacts() {
    console.log('๐งน Cleaning up build artifacts...');
    
    // Remove old zip files
    const zipFiles = [
      'NW-Buddy-Scraper-Standalone.zip',
      'NW-Buddy-Scraper-Simple.zip'
    ];
    
    for (const zip of zipFiles) {
      const zipPath = path.join(this.projectRoot, zip);
      if (fs.existsSync(zipPath)) {
        await fs.remove(zipPath);
        console.log(`   โ Removed: ${zip}`);
      }
    }
    
    // Clean up old output files (keep recent ones)
    const outputPath = path.join(this.projectRoot, 'output');
    if (fs.existsSync(outputPath)) {
      const files = await fs.readdir(outputPath);
      const oldFiles = files.filter(file => {
        // Keep files from the last 7 days
        const filePath = path.join(outputPath, file);
        const stats = fs.statSync(filePath);
        const daysOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);
        return daysOld > 7;
      });
      
      for (const file of oldFiles) {
        const filePath = path.join(outputPath, file);
        await fs.remove(filePath);
        console.log(`   โ Removed old file: ${file}`);
      }
    }
  }

  async createProjectStructure() {
    console.log('๐ Creating clean project structure...');
    
    // Create a project structure overview
    const structure = `# NW Buddy Scraper - Project Structure

## ๐ Root Directory

\`\`\`
nw-buddy-scraper/
โโโ assets/                    # Application assets
โ   โโโ nwbuddy/              # NWBuddy executable and configs
โโโ backup/                   # Backup of important files
โโโ config/                   # Configuration files
โ   โโโ artifacts-config.js
โ   โโโ crafting-recipes.txt
โ   โโโ nwbuddy-config.js
โโโ dist-beta/                # Beta distribution files
โ   โโโ START-NW-BUDDY-SCRAPER.bat
โ   โโโ launch-app.bat
โ   โโโ README.txt
โ   โโโ win-unpacked/
โโโ docs/                     # Documentation
โ   โโโ README.md
โ   โโโ DISCORD_BOT_INTEGRATION.md
โ   โโโ ELECTRON_README.md
โ   โโโ PROJECT_STRUCTURE.md
โโโ electron/                 # Electron application
โ   โโโ main.js
โ   โโโ renderer/
โ       โโโ index.html
โ       โโโ renderer.js
โ       โโโ styles.css
โโโ output/                   # Generated output files
โ   โโโ nwbuddy/
โ   โโโ nwdb-perks/
โ   โโโ nwmp/
โโโ scripts/                  # Build and utility scripts
โ   โโโ build.js
โ   โโโ create-single-bat.js
โ   โโโ create-simple-package.js
โ   โโโ create-final-package.js
โ   โโโ cleanup-project.js
โ   โโโ ...
โโโ src/                      # Source code
โ   โโโ crawler.js
โ   โโโ nwbuddy-crawler.js
โ   โโโ nwdb-perk-craftmod-scraper.js
โ   โโโ nwdb-perks-scraper.js
โ   โโโ nwmp-market-scraper.js
โโโ package.json              # Project configuration
โโโ package-lock.json         # Dependency lock file
โโโ README.md                 # Main project README
\`\`\`

## ๐ Quick Commands

- \`npm start\` - Start the application
- \`npm run create-single-bat\` - Create single batch file launcher
- \`npm run create-simple-package\` - Create distribution package
- \`npm run cleanup\` - Clean up project files

## ๐ฆ Distribution

The \`dist-beta/\` folder contains the ready-to-distribute files:
- \`START-NW-BUDDY-SCRAPER.bat\` - Main launcher
- \`launch-app.bat\` - Application launcher
- \`win-unpacked/\` - Electron application files
- \`README.txt\` - User instructions
`;
    
    const structurePath = path.join(this.docsPath, 'PROJECT_STRUCTURE.md');
    await fs.writeFile(structurePath, structure);
    console.log('   โ Created project structure documentation');
  }
}

// Run the cleaner if this script is executed directly
if (require.main === module) {
  const cleaner = new ProjectCleaner();
  cleaner.cleanupProject().then(() => {
    console.log('\n๐ Project cleanup completed!');
    console.log('\n๐ Summary:');
    console.log('โ Created backup of important files');
    console.log('โ Removed unnecessary files and directories');
    console.log('โ Organized documentation in docs/ folder');
    console.log('โ Cleaned up build artifacts');
    console.log('โ Created clean project structure');
    console.log('\n๐ Project is now clean and organized!');
    console.log('๐ฆ Backup available in: backup/');
    console.log('๐ Documentation in: docs/');
    console.log('๐ Ready for development and distribution!');
    process.exit(0);
  }).catch(error => {
    console.error('\n๐ฅ Project cleanup failed!');
    process.exit(1);
  });
}

module.exports = ProjectCleaner; 